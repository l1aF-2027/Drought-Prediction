import streamlit as st
from datetime import timedelta, date
import pydeck as pdk
import pandas as pd
import geopandas as gpd
import json
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

st.set_page_config(page_title="Drought Monitor", page_icon="üåµ", layout="wide")
# Th√™m CSS cho sidebar c·ªë ƒë·ªãnh
st.markdown("""
<style>
    .css-1d391kg {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 14rem;
        overflow-y: auto;
        background-color: #f0f2f6;
        z-index: 100;
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    
    .css-18e3th9 {
        padding-left: 16rem !important;
    }
    
    .css-1lsmgbg, .block-container, header[data-testid="stHeader"] {
        padding-left: 2rem !important;
    }
    
    @media (max-width: 768px) {
        .css-1d391kg {
            width: 100%;
            height: auto;
            position: relative;
        }
        .css-18e3th9 {
            padding-left: 1rem !important;
        }
    }
</style>
""", unsafe_allow_html=True)



# Cache c√°c h√†m ƒë·ªçc d·ªØ li·ªáu ƒë·ªÉ ch·ªâ ƒë·ªçc m·ªôt l·∫ßn
@st.cache_data
def load_data():
    dict_map = pd.read_csv('https://huggingface.co/spaces/l1aF2027/Drought-Monitor/raw/main/src/data/dict_map.csv')
    counties_gdf = gpd.read_file('data/counties.geojson')
    counties_gdf['fips'] = counties_gdf['GEOID'].astype(str).str.zfill(5)
    dict_map['fips'] = dict_map['fips'].astype(str).str.zfill(5)
    dict_map['date'] = pd.to_datetime(dict_map['date'])
    return dict_map, counties_gdf

def get_drought_color(level=0):
    colors = {
        0: [166, 249, 166, 160],
        1: [255, 255, 190, 160],
        2: [255, 211, 127, 160],
        3: [255, 170, 0, 160],
        4: [230, 0, 0, 160],
        5: [115, 0, 0, 160]
    }
    return colors.get(level, [166, 249, 166, 160])

def get_drought_description(level=0):
    descriptions = {
        0: "Kh√¥ng c√≥ h·∫°n h√°n",
        1: "Kh√¥ h·∫°n nh·∫π (D0)",
        2: "H·∫°n trung b√¨nh (D1)",
        3: "H·∫°n nghi√™m tr·ªçng (D2)",
        4: "H·∫°n c·ª±c k·ª≥ nghi√™m tr·ªçng (D3)",
        5: "H·∫°n th·∫£m kh·ªëc (D4)"
    }
    return descriptions.get(level, "Kh√¥ng x√°c ƒë·ªãnh")

def get_drought_levels():
    return {
        0: "Kh√¥ng c√≥ h·∫°n h√°n",
        1: "Kh√¥ h·∫°n nh·∫π (D0)",
        2: "H·∫°n trung b√¨nh (D1)",
        3: "H·∫°n nghi√™m tr·ªçng (D2)",
        4: "H·∫°n c·ª±c k·ª≥ nghi√™m tr·ªçng (D3)",
        5: "H·∫°n th·∫£m kh·ªëc (D4)"
    }

def get_previous_monday(date_val):
    days_to_subtract = (date_val.weekday() - 0) % 7
    if days_to_subtract == 0:
        return date_val
    else:
        return date_val - timedelta(days=days_to_subtract)

def calculate_accuracy(df):
    if df.empty:
        return 0.0
    correct_predictions = (df['y_pred_rounded'] == df['y_true_rounded']).sum()
    total_predictions = len(df)
    return (correct_predictions / total_predictions) * 100 if total_predictions > 0 else 0

def prepare_map_data(current_data, counties_gdf, is_prediction=True):
    """Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu cho b·∫£n ƒë·ªì ƒë·ªÉ tr√°nh l·∫∑p l·∫°i m√£"""
    if is_prediction:
        data = current_data.copy()
        data['drought_level'] = data['y_pred_rounded']
    else:
        data = current_data.copy()
        data['drought_level'] = data['y_true_rounded']
    
    # √Åp d·ª•ng b·ªô l·ªçc m·ª©c ƒë·ªô h·∫°n h√°n n·∫øu c√≥ l·ª±a ch·ªçn
    if st.session_state.selected_drought_levels:
        data = data[data['drought_level'].isin(st.session_state.selected_drought_levels)]
    
    merged = counties_gdf.merge(data, on='fips', how='inner')
    if merged.empty:
        return None
    
    merged['line_width'] = 0
    merged['line_color'] = [[0, 0, 0, 0]] * len(merged)
    merged['opacity'] = 0.8  # ƒê·ªô m·ªù m·∫∑c ƒë·ªãnh cao h∆°n

    # T√¥ ƒë·∫≠m vi·ªÅn v√πng sai
    merged.loc[merged['is_prediction_wrong'], 'line_width'] = 2.0 if is_prediction else 0.5
    for idx in merged.index[merged['is_prediction_wrong']]:
        merged.at[idx, 'line_color'] = [0, 0, 0, 255]

    # Highlight FIPS ƒë∆∞·ª£c t√¨m
    if st.session_state.searched_fips:
        merged.loc[merged['fips'] == st.session_state.searched_fips, 'line_width'] = 4.0
        merged.loc[merged['fips'] == st.session_state.searched_fips, 'opacity'] = 1.0
        for idx in merged.index[merged['fips'] == st.session_state.searched_fips]:
            merged.at[idx, 'line_color'] = [255, 0, 0, 255]

    merged['color'] = merged['drought_level'].apply(get_drought_color)
    merged['drought_description'] = merged['drought_level'].apply(get_drought_description)
    merged = merged.to_crs('EPSG:4326')
    for col in merged.select_dtypes(include=['datetime64']).columns:
        merged[col] = merged[col].astype(str)
    
    return merged

def create_deck(merged_data, fips_location):
    """T·∫°o deck map ƒë·ªÉ tr√°nh l·∫∑p l·∫°i m√£"""
    if merged_data is None:
        return None
        
    merged_json = json.loads(merged_data.to_json())
    view_state = pdk.ViewState(
        latitude=fips_location['latitude'] if fips_location else st.session_state.view_state['latitude'],
        longitude=fips_location['longitude'] if fips_location else st.session_state.view_state['longitude'],
        zoom=fips_location['zoom'] if fips_location else st.session_state.view_state['zoom'],
        pitch=0,
        bearing=0
    )
    
    polygon_layer = pdk.Layer(
        "GeoJsonLayer",
        data=merged_json,
        stroked=True,
        filled=True,
        get_fill_color="properties.color",
        get_line_color="properties.line_color",
        get_line_width="properties.line_width",
        get_opacity="properties.opacity",
        line_width_min_pixels=1,
        pickable=True,
        auto_highlight=True,
        highlight_color=[0, 0, 0, 50], 
    )
    tooltip = {
        "html": "<div><b>FIPS:</b> {fips}<br><b>H·∫°t:</b> {NAME}<br><b>M·ª©c h·∫°n h√°n:</b> {drought_description}</div>",
        "style": {
            "backgroundColor": "white",
            "color": "black",
            "border": "1px solid black",
            "padding": "10px",
            "borderRadius": "5px",
            "boxShadow": "0 2px 10px rgba(0,0,0,0.15)"
        }
    }
    return pdk.Deck(
        layers=[polygon_layer],
        initial_view_state=view_state,
        map_style="mapbox://styles/mapbox/light-v10",
        tooltip=tooltip
    )

def create_statistics_chart(pred_counts, true_counts, all_levels):
    """T·∫°o bi·ªÉu ƒë·ªì th·ªëng k√™ ƒë·ªÉ tr√°nh l·∫∑p l·∫°i m√£"""
    fig, ax = plt.subplots(figsize=(15, 10))
    
    # V·ªã tr√≠ c·ªßa c√°c c·ªôt
    x = np.arange(len(all_levels))
    width = 0.35
    
    # ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng theo m·ª©c ƒë·ªô
    pred_values = [pred_counts.get(level, 0) for level in all_levels]
    true_values = [true_counts.get(level, 0) for level in all_levels]
    
    # V·∫Ω c·ªôt
    rects1 = ax.bar(x - width/2, pred_values, width, label='D·ª± ƒëo√°n', alpha=0.7, color='#3498db')
    rects2 = ax.bar(x + width/2, true_values, width, label='Th·ª±c t·∫ø', alpha=0.7, color='#e74c3c')
    
    # Th√™m nh√£n, ti√™u ƒë·ªÅ v√† ch√∫ th√≠ch
    ax.set_xlabel('M·ª©c ƒë·ªô h·∫°n h√°n', fontsize=16)
    ax.set_ylabel('S·ªë l∆∞·ª£ng v√πng', fontsize=16)
    ax.set_title('Ph√¢n b·ªë m·ª©c ƒë·ªô h·∫°n h√°n', fontsize=20)
    ax.set_xticks(x)
    labels = ["Kh√¥ng h·∫°n", "D0", "D1", "D2", "D3", "D4"]
    ax.set_xticklabels(labels, fontsize=16)
    ax.legend(fontsize=16)
    
    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng tr√™n c√°c c·ªôt n·∫øu gi√° tr·ªã > 0
    def autolabel(rects):
        for rect in rects:
            height = rect.get_height()
            if height > 0:
                ax.annotate(f'{int(height)}',
                            xy=(rect.get_x() + rect.get_width() / 2, height),
                            xytext=(0, 3), 
                            textcoords="offset points",
                            ha='center', va='bottom', fontsize=16)
    
    autolabel(rects1)
    autolabel(rects2)
    
    fig.tight_layout()
    return fig

def create_confusion_matrix(filtered_data):
    """T·∫°o confusion matrix ƒë·ªÉ tr√°nh l·∫∑p l·∫°i m√£"""
    # X√°c ƒë·ªãnh c√°c nh√£n d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ l·ªçc
    unique_levels = sorted(set(filtered_data['y_true_rounded'].unique()) | 
                          set(filtered_data['y_pred_rounded'].unique()))
    
    if len(unique_levels) > 0:
        # T·∫°o confusion matrix v·ªõi c√°c nh√£n ph√π h·ª£p
        cm = confusion_matrix(
            filtered_data['y_true_rounded'], 
            filtered_data['y_pred_rounded'],
            labels=unique_levels
        )

        # T·∫°o nh√£n ƒë·∫πp
        label_names = ["0", "D0", "D1", "D2", "D3", "D4"]
        cm_labels = [label_names[level] if level < len(label_names) else f"Level {level}" for level in unique_levels]
        
        # T·∫°o b·∫£ng DataFrame c√≥ nh√£n ƒë·∫πp
        cm_df = pd.DataFrame(
            cm, 
            index=[f"Th·ª±c t·∫ø {label}" for label in cm_labels],
            columns=[f"D·ª± ƒëo√°n {label}" for label in cm_labels]
        )

        # T·∫°o heatmap cho confusion matrix
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues', ax=ax, cbar=False)
        plt.title('Confusion Matrix', fontsize=15)
        plt.tight_layout()
        
        return fig
    
    return None

# Kh·ªüi t·∫°o session state
if 'view_state' not in st.session_state:
    st.session_state.view_state = {
        'latitude': 39.8283,
        'longitude': -98.5795,
        'zoom': 3.5,
        'pitch': 0,
        'bearing': 0
    }

if 'searched_fips' not in st.session_state:
    st.session_state.searched_fips = None

if 'hovered_fips' not in st.session_state:
    st.session_state.hovered_fips = None

if 'fips_location' not in st.session_state:
    st.session_state.fips_location = None

if 'selected_drought_levels' not in st.session_state:
    st.session_state.selected_drought_levels = []

# UI ph·∫ßn sidebar
with st.sidebar:
    selected_date = st.date_input(
        "Ch·ªçn ng√†y",
        date(2019, 1, 1),  
        min_value=date(2018, 6, 25),
        max_value=date(2020, 12, 31)
    )
    selected_weeks_to_show = st.number_input("Ch·ªçn s·ªë tu·∫ßn d·ª± ƒëo√°n", value=1, min_value=1, max_value=6)
    search_fips = st.text_input("Nh·∫≠p m√£ FIPS (5 ch·ªØ s·ªë)", "", help="FIPS(County) l√† m√£ ƒë·ªãnh danh t·ª´ng h·∫°t c·ªßa M·ªπ")
    
    if search_fips:
        st.session_state.searched_fips = search_fips.zfill(5)
        st.info(f"ƒêang t√¨m FIPS: {st.session_state.searched_fips}")
    
    # Th√™m n√∫t ƒë·ªÉ x√≥a k·∫øt qu·∫£ t√¨m ki·∫øm
    if not search_fips:
        st.session_state.searched_fips = None
        st.session_state.fips_location = None
    
    drought_levels = get_drought_levels()
    options = list(drought_levels.values())
    default = []  # Kh√¥ng ch·ªçn g√¨ m·∫∑c ƒë·ªãnh = hi·ªÉn th·ªã t·∫•t c·∫£
    
    selected_drought_labels = st.multiselect(
        "Ch·ªçn m·ª©c ƒë·ªô h·∫°n h√°n ƒë·ªÉ hi·ªÉn th·ªã",
        options=options,
        default=default,
        help="ƒê·ªÉ tr·ªëng s·∫Ω hi·ªÉn th·ªã t·∫•t c·∫£ m·ª©c ƒë·ªô h·∫°n h√°n"
    )
    
    # Chuy·ªÉn ƒë·ªïi c√°c nh√£n ƒë√£ ch·ªçn th√†nh m√£ s·ªë
    selected_drought_level_codes = []
    for label in selected_drought_labels:
        for code, desc in drought_levels.items():
            if desc == label:
                selected_drought_level_codes.append(code)
    
    st.session_state.selected_drought_levels = selected_drought_level_codes
    
    st.header("Ch√∫ th√≠ch m·ª©c ƒë·ªô h·∫°n h√°n")
    for level in range(6):
        st.markdown(
            f'<div style="display:flex;align-items:center;">'
            f'<div style="width:20px;height:20px;background-color:rgba{tuple(get_drought_color(level))};margin-right:10px;"></div>'
            f'<div>{get_drought_description(level)}</div>'
            f'</div>',
            unsafe_allow_html=True
        )

# Ph·∫ßn n·ªôi dung ch√≠nh
st.title("üåµ Drought Monitor")
st.markdown("B·∫£n ƒë·ªì tr·ª±c quan h√≥a d·ªØ li·ªáu h·∫°n h√°n d·ª±a tr√™n t·ªça ƒë·ªô ƒë·ªãa l√Ω")

dict_map, counties_gdf = load_data()

# T√¨m FIPS m·ªôt l·∫ßn duy nh·∫•t
if st.session_state.searched_fips:
    fips_data = counties_gdf[counties_gdf['fips'] == st.session_state.searched_fips]
    if not fips_data.empty:
        fips_centroid = fips_data.geometry.centroid.iloc[0]
        st.session_state.fips_location = {
            'latitude': fips_centroid.y,
            'longitude': fips_centroid.x,
            'zoom': 8
        }
        st.success(f"ƒê√£ t√¨m th·∫•y FIPS: {st.session_state.searched_fips}")
    else:
        st.error(f"Kh√¥ng t√¨m th·∫•y FIPS: {st.session_state.searched_fips}")
        st.session_state.searched_fips = None
        st.session_state.fips_location = None

# L·∫•y v·ªã tr√≠ FIPS t·ª´ session_state
fips_location = st.session_state.fips_location

# T√≠nh ng√†y b·∫Øt ƒë·∫ßu tu·∫ßn m·ªôt l·∫ßn
target_monday = get_previous_monday(selected_date)

# Pre-filter data cho to√†n b·ªô range tu·∫ßn ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
start_date = target_monday
end_date = target_monday + timedelta(days=7*(selected_weeks_to_show-1))
date_range_data = dict_map[(dict_map['date'] >= pd.Timestamp(start_date)) & 
                            (dict_map['date'] <= pd.Timestamp(end_date))]

# Hi·ªÉn th·ªã t·ª´ng tu·∫ßn
for week in range(selected_weeks_to_show):
    current_date = target_monday + timedelta(days=7*week)
    last_date = current_date + timedelta(days=6)
    st.header(f"Tu·∫ßn {week+1}: {current_date.strftime('%d/%m/%Y')} - {last_date.strftime('%d/%m/%Y')}")
    
    # L·ªçc d·ªØ li·ªáu cho tu·∫ßn hi·ªán t·∫°i t·ª´ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc tr∆∞·ªõc ƒë√≥ (nhanh h∆°n)
    current_data = date_range_data[(date_range_data['date'] == pd.Timestamp(current_date)) & 
                                    (date_range_data['week'] == week)]
    
    if current_data.empty:
        st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y {current_date.strftime('%d/%m/%Y')} v√† tu·∫ßn {week}")
        continue
    
    # T·∫°o b·∫£n sao d·ªØ li·ªáu g·ªëc tr∆∞·ªõc khi √°p d·ª•ng b·∫•t k·ª≥ b·ªô l·ªçc n√†o
    unfiltered_data = current_data.copy()
    unfiltered_data['is_prediction_wrong'] = unfiltered_data['y_pred_rounded'] != unfiltered_data['y_true_rounded']
    
    # ƒê√°nh d·∫•u c√°c d·ª± ƒëo√°n ƒë√∫ng v√† sai
    current_data['is_prediction_wrong'] = current_data['y_pred_rounded'] != current_data['y_true_rounded']
    
    # Chuy·ªÉn ƒë·ªïi date th√†nh string m·ªôt l·∫ßn duy nh·∫•t
    current_data_str_date = current_data.copy()
    current_data_str_date['date'] = current_data_str_date['date'].dt.strftime('%Y-%m-%d')
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("B·∫£n ƒë·ªì d·ª± ƒëo√°n")
        # Chu·∫©n b·ªã d·ªØ li·ªáu b·∫£n ƒë·ªì d·ª± ƒëo√°n
        merged_pred = prepare_map_data(current_data_str_date, counties_gdf, is_prediction=True)
        if merged_pred is not None:
            deck_pred = create_deck(merged_pred, fips_location)
            st.pydeck_chart(deck_pred)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√°c m·ª©c ƒë·ªô h·∫°n h√°n ƒë√£ ch·ªçn")
    
    with col2:
        st.subheader("B·∫£n ƒë·ªì th·ª±c t·∫ø")
        # Chu·∫©n b·ªã d·ªØ li·ªáu b·∫£n ƒë·ªì th·ª±c t·∫ø
        merged_true = prepare_map_data(current_data_str_date, counties_gdf, is_prediction=False)
        if merged_true is not None:
            deck_true = create_deck(merged_true, fips_location)
            st.pydeck_chart(deck_true)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√°c m·ª©c ƒë·ªô h·∫°n h√°n ƒë√£ ch·ªçn")
    
    # T·∫°o hai c·ªôt cho metrics v√† confusion matrix
    metrics_col, cm_col = st.columns(2)
    
    with metrics_col:
        # Hi·ªÉn th·ªã th·ªëng k√™ v·ªÅ c√°c m·ª©c ƒë·ªô h·∫°n h√°n
        st.subheader("Th·ªëng k√™ v√† ƒë√°nh gi√° m√¥ h√¨nh")
        
        # T·∫°o d·ªØ li·ªáu ƒë√£ l·ªçc theo drought levels (n·∫øu c√≥)
        if st.session_state.selected_drought_levels:
            # L·ªçc d·ªØ li·ªáu theo drought levels ƒë√£ ch·ªçn (cho c·∫£ pred v√† true)
            filtered_data_for_metrics = current_data[
                (current_data['y_pred_rounded'].isin(st.session_state.selected_drought_levels)) | 
                (current_data['y_true_rounded'].isin(st.session_state.selected_drought_levels))
            ]
        else:
            # N·∫øu kh√¥ng c√≥ b·ªô l·ªçc, s·ª≠ d·ª•ng to√†n b·ªô d·ªØ li·ªáu
            filtered_data_for_metrics = current_data
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c ch·ªâ s·ªë n·∫øu c√≥ d·ªØ li·ªáu
        if not filtered_data_for_metrics.empty:
            # T√≠nh accuracy d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ l·ªçc
            accuracy = calculate_accuracy(filtered_data_for_metrics)
            
            # Hi·ªÉn th·ªã accuracy v·ªõi m√†u s·∫Øc ph√π h·ª£p
            accuracy_color = "#2f855a" if accuracy >= 80 else "#c05621" if accuracy >= 50 else "#c53030"
            
            # N·∫øu ƒëang √°p d·ª•ng b·ªô l·ªçc, c≈©ng t√≠nh accuracy c·ªßa d·ªØ li·ªáu kh√¥ng l·ªçc ƒë·ªÉ so s√°nh
            if st.session_state.selected_drought_levels:
                unfiltered_accuracy = calculate_accuracy(unfiltered_data)
                st.markdown(f"""
                <div style="padding: 10px; border-radius: 5px; margin-bottom: 10px;">
                    <h5 style="margin: 0; color: black;">Accuracy (ƒë√£ l·ªçc): <span style="color: {accuracy_color};">{accuracy:.2f}%</span></h5>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="padding: 10px; border-radius: 5px; margin-bottom: 10px;">
                    <h5 style="margin: 0; color: black;">Accuracy: <span style="color: {accuracy_color};">{accuracy:.2f}%</span></h5>
                </div>
                """, unsafe_allow_html=True)
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        # L·∫•y d·ªØ li·ªáu cho b·∫£n ƒë·ªì d·ª± ƒëo√°n v√† th·ª±c t·∫ø
        pred_data = current_data_str_date.copy()
        pred_data['drought_level'] = pred_data['y_pred_rounded']
        true_data = current_data_str_date.copy()
        true_data['drought_level'] = true_data['y_true_rounded']
        
        # √Åp d·ª•ng b·ªô l·ªçc
        if st.session_state.selected_drought_levels:
            pred_data = pred_data[pred_data['drought_level'].isin(st.session_state.selected_drought_levels)]
            true_data = true_data[true_data['drought_level'].isin(st.session_state.selected_drought_levels)]
        
        # L·∫•y s·ªë l∆∞·ª£ng t·ª´ d·ªØ li·ªáu
        if not pred_data.empty:
            pred_counts = pred_data['drought_level'].value_counts().to_dict()
        else:
            pred_counts = {}
        
        if not true_data.empty:
            true_counts = true_data['drought_level'].value_counts().to_dict()
        else:
            true_counts = {}
        
        # T·∫°o bi·ªÉu ƒë·ªì
        if not (pred_data.empty and true_data.empty):
            all_levels = range(6)
            fig = create_statistics_chart(pred_counts, true_counts, all_levels)
            st.pyplot(fig)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì")
    
    with cm_col:
        # √Åp d·ª•ng b·ªô l·ªçc cho confusion matrix
        if st.session_state.selected_drought_levels:
            # L·ªçc d·ªØ li·ªáu theo drought levels ƒë√£ ch·ªçn (cho c·∫£ pred v√† true)
            filtered_data_for_cm = current_data[
                (current_data['y_pred_rounded'].isin(st.session_state.selected_drought_levels)) | 
                (current_data['y_true_rounded'].isin(st.session_state.selected_drought_levels))
            ]
        else:
            # N·∫øu kh√¥ng c√≥ b·ªô l·ªçc, s·ª≠ d·ª•ng to√†n b·ªô d·ªØ li·ªáu
            filtered_data_for_cm = current_data
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c ch·ªâ s·ªë n·∫øu c√≥ d·ªØ li·ªáu
        if not filtered_data_for_cm.empty:
            # T·∫°o confusion matrix
            st.subheader("Confusion Matrix")
            cm_fig = create_confusion_matrix(filtered_data_for_cm)
            if cm_fig:
                st.pyplot(cm_fig)
            else:
                st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o confusion matrix v·ªõi b·ªô l·ªçc hi·ªán t·∫°i")
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë·ªÉ t√≠nh c√°c ch·ªâ s·ªë")

# Th√™m CSS cho hi·ªáu ·ª©ng l√†m m·ªù
st.markdown("""
<style>
.highlight-region {
    filter: none !important;
}
.blur-region {
    filter: blur(2px) opacity(0.7);
    transition: filter 0.3s ease;
}
</style>
""", unsafe_allow_html=True)